import cohere
import os
import uuid
from typing import List, Dict

from dotenv import load_dotenv
load_dotenv()

from document_url import Documents
from upload import Loader

COHERE_API_KEY = os.environ["COHERE_API_KEY"]

co = cohere.Client(COHERE_API_KEY)

class Chatbot:

    def __init__(self, docs: Documents, file_docs: Loader):
        self.docs = docs
        self.file_docs = file_docs
        self.conversation_id = str(uuid.uuid4())
        self.response = ""

    def generate_response(self, message: str):
        """
        Generates a response to the user's message.

        Parameters:
        message (str): The user's message.

        Yields:
        Event: A response event generated by the chatbot.

        Returns:
        List[Dict[str, str]]: A list of dictionaries representing the retrieved documents.

        """

        # Generate search queries (if any)
        response = co.chat(message=message, search_queries_only=True)


        # If there are search queries, retrieve documents and respond
        if response.search_queries:
            print("Retrieving information...")

            documents = self.retrieve_docs(response)

            response = co.chat(
                message=message,
                documents=documents,
                conversation_id=self.conversation_id,
                stream=True,
            )
            for event in response:
                yield event
            yield response

        # If there is no search query, directly respond
        else:
            response = co.chat(
                message=message, 
                conversation_id=self.conversation_id, 
                stream=True
            )
            for event in response:
                yield event
    
    def retrieve_docs(self, response) -> List[Dict[str, str]]:
            """
            Retrieves documents based on the search queries in the response.

            Parameters:
            response: The response object containing search queries.

            Returns:
            List[Dict[str, str]]: A list of dictionaries representing the retrieved documents.

            """
            # Get the query(s)
            queries = []
            for search_query in response.search_queries:
                queries.append(search_query["text"])

            # Retrieve documents for each query
            retrieved_docs = []
            for query in queries:
                retrieved_docs.extend(self.docs.retrieve(query))
                retrieved_docs.extend(self.file_docs.retrieve(query))

            return retrieved_docs    
